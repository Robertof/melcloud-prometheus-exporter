// Code generated by "enumer -type=OperationMode"; DO NOT EDIT.

package driver

import (
	"fmt"
	"strings"
)

const _OperationModeName = "OperationModeDryFloorOperationModeHeatingOperationModeAntiFreezeOperationModeCoolingOperationModeIdleOperationModeLegionellaOperationModeHolidayOperationModeProhibited"

var _OperationModeIndex = [...]uint8{0, 21, 41, 64, 84, 101, 124, 144, 167}

const _OperationModeLowerName = "operationmodedryflooroperationmodeheatingoperationmodeantifreezeoperationmodecoolingoperationmodeidleoperationmodelegionellaoperationmodeholidayoperationmodeprohibited"

func (i OperationMode) String() string {
	if i >= OperationMode(len(_OperationModeIndex)-1) {
		return fmt.Sprintf("OperationMode(%d)", i)
	}
	return _OperationModeName[_OperationModeIndex[i]:_OperationModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OperationModeNoOp() {
	var x [1]struct{}
	_ = x[OperationModeDryFloor-(0)]
	_ = x[OperationModeHeating-(1)]
	_ = x[OperationModeAntiFreeze-(2)]
	_ = x[OperationModeCooling-(3)]
	_ = x[OperationModeIdle-(4)]
	_ = x[OperationModeLegionella-(5)]
	_ = x[OperationModeHoliday-(6)]
	_ = x[OperationModeProhibited-(7)]
}

var _OperationModeValues = []OperationMode{OperationModeDryFloor, OperationModeHeating, OperationModeAntiFreeze, OperationModeCooling, OperationModeIdle, OperationModeLegionella, OperationModeHoliday, OperationModeProhibited}

var _OperationModeNameToValueMap = map[string]OperationMode{
	_OperationModeName[0:21]:         OperationModeDryFloor,
	_OperationModeLowerName[0:21]:    OperationModeDryFloor,
	_OperationModeName[21:41]:        OperationModeHeating,
	_OperationModeLowerName[21:41]:   OperationModeHeating,
	_OperationModeName[41:64]:        OperationModeAntiFreeze,
	_OperationModeLowerName[41:64]:   OperationModeAntiFreeze,
	_OperationModeName[64:84]:        OperationModeCooling,
	_OperationModeLowerName[64:84]:   OperationModeCooling,
	_OperationModeName[84:101]:       OperationModeIdle,
	_OperationModeLowerName[84:101]:  OperationModeIdle,
	_OperationModeName[101:124]:      OperationModeLegionella,
	_OperationModeLowerName[101:124]: OperationModeLegionella,
	_OperationModeName[124:144]:      OperationModeHoliday,
	_OperationModeLowerName[124:144]: OperationModeHoliday,
	_OperationModeName[144:167]:      OperationModeProhibited,
	_OperationModeLowerName[144:167]: OperationModeProhibited,
}

var _OperationModeNames = []string{
	_OperationModeName[0:21],
	_OperationModeName[21:41],
	_OperationModeName[41:64],
	_OperationModeName[64:84],
	_OperationModeName[84:101],
	_OperationModeName[101:124],
	_OperationModeName[124:144],
	_OperationModeName[144:167],
}

// OperationModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OperationModeString(s string) (OperationMode, error) {
	if val, ok := _OperationModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OperationModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OperationMode values", s)
}

// OperationModeValues returns all values of the enum
func OperationModeValues() []OperationMode {
	return _OperationModeValues
}

// OperationModeStrings returns a slice of all String values of the enum
func OperationModeStrings() []string {
	strs := make([]string, len(_OperationModeNames))
	copy(strs, _OperationModeNames)
	return strs
}

// IsAOperationMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OperationMode) IsAOperationMode() bool {
	for _, v := range _OperationModeValues {
		if i == v {
			return true
		}
	}
	return false
}
